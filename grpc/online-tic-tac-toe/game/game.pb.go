// Code generated by protoc-gen-go. DO NOT EDIT.
// source: game.proto

package game

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type JoinRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JoinRequest) Reset()         { *m = JoinRequest{} }
func (m *JoinRequest) String() string { return proto.CompactTextString(m) }
func (*JoinRequest) ProtoMessage()    {}
func (*JoinRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_38fc58335341d769, []int{0}
}

func (m *JoinRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JoinRequest.Unmarshal(m, b)
}
func (m *JoinRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JoinRequest.Marshal(b, m, deterministic)
}
func (m *JoinRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JoinRequest.Merge(m, src)
}
func (m *JoinRequest) XXX_Size() int {
	return xxx_messageInfo_JoinRequest.Size(m)
}
func (m *JoinRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_JoinRequest.DiscardUnknown(m)
}

var xxx_messageInfo_JoinRequest proto.InternalMessageInfo

func (m *JoinRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type JoinResponse struct {
	Success              bool      `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	PlayerId             *PlayerId `protobuf:"bytes,2,opt,name=playerId,proto3" json:"playerId,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *JoinResponse) Reset()         { *m = JoinResponse{} }
func (m *JoinResponse) String() string { return proto.CompactTextString(m) }
func (*JoinResponse) ProtoMessage()    {}
func (*JoinResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_38fc58335341d769, []int{1}
}

func (m *JoinResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JoinResponse.Unmarshal(m, b)
}
func (m *JoinResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JoinResponse.Marshal(b, m, deterministic)
}
func (m *JoinResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JoinResponse.Merge(m, src)
}
func (m *JoinResponse) XXX_Size() int {
	return xxx_messageInfo_JoinResponse.Size(m)
}
func (m *JoinResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_JoinResponse.DiscardUnknown(m)
}

var xxx_messageInfo_JoinResponse proto.InternalMessageInfo

func (m *JoinResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *JoinResponse) GetPlayerId() *PlayerId {
	if m != nil {
		return m.PlayerId
	}
	return nil
}

type PlayerId struct {
	GameId               int32    `protobuf:"varint,1,opt,name=gameId,proto3" json:"gameId,omitempty"`
	Player               int32    `protobuf:"varint,2,opt,name=player,proto3" json:"player,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerId) Reset()         { *m = PlayerId{} }
func (m *PlayerId) String() string { return proto.CompactTextString(m) }
func (*PlayerId) ProtoMessage()    {}
func (*PlayerId) Descriptor() ([]byte, []int) {
	return fileDescriptor_38fc58335341d769, []int{2}
}

func (m *PlayerId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlayerId.Unmarshal(m, b)
}
func (m *PlayerId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlayerId.Marshal(b, m, deterministic)
}
func (m *PlayerId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerId.Merge(m, src)
}
func (m *PlayerId) XXX_Size() int {
	return xxx_messageInfo_PlayerId.Size(m)
}
func (m *PlayerId) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerId.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerId proto.InternalMessageInfo

func (m *PlayerId) GetGameId() int32 {
	if m != nil {
		return m.GameId
	}
	return 0
}

func (m *PlayerId) GetPlayer() int32 {
	if m != nil {
		return m.Player
	}
	return 0
}

type Action struct {
	PlayerId             *PlayerId `protobuf:"bytes,1,opt,name=playerId,proto3" json:"playerId,omitempty"`
	Cell                 int32     `protobuf:"varint,2,opt,name=cell,proto3" json:"cell,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Action) Reset()         { *m = Action{} }
func (m *Action) String() string { return proto.CompactTextString(m) }
func (*Action) ProtoMessage()    {}
func (*Action) Descriptor() ([]byte, []int) {
	return fileDescriptor_38fc58335341d769, []int{3}
}

func (m *Action) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Action.Unmarshal(m, b)
}
func (m *Action) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Action.Marshal(b, m, deterministic)
}
func (m *Action) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Action.Merge(m, src)
}
func (m *Action) XXX_Size() int {
	return xxx_messageInfo_Action.Size(m)
}
func (m *Action) XXX_DiscardUnknown() {
	xxx_messageInfo_Action.DiscardUnknown(m)
}

var xxx_messageInfo_Action proto.InternalMessageInfo

func (m *Action) GetPlayerId() *PlayerId {
	if m != nil {
		return m.PlayerId
	}
	return nil
}

func (m *Action) GetCell() int32 {
	if m != nil {
		return m.Cell
	}
	return 0
}

type GameState struct {
	Finished             bool     `protobuf:"varint,1,opt,name=finished,proto3" json:"finished,omitempty"`
	Turn                 bool     `protobuf:"varint,2,opt,name=turn,proto3" json:"turn,omitempty"`
	Cells                []uint32 `protobuf:"varint,3,rep,packed,name=cells,proto3" json:"cells,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GameState) Reset()         { *m = GameState{} }
func (m *GameState) String() string { return proto.CompactTextString(m) }
func (*GameState) ProtoMessage()    {}
func (*GameState) Descriptor() ([]byte, []int) {
	return fileDescriptor_38fc58335341d769, []int{4}
}

func (m *GameState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GameState.Unmarshal(m, b)
}
func (m *GameState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GameState.Marshal(b, m, deterministic)
}
func (m *GameState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameState.Merge(m, src)
}
func (m *GameState) XXX_Size() int {
	return xxx_messageInfo_GameState.Size(m)
}
func (m *GameState) XXX_DiscardUnknown() {
	xxx_messageInfo_GameState.DiscardUnknown(m)
}

var xxx_messageInfo_GameState proto.InternalMessageInfo

func (m *GameState) GetFinished() bool {
	if m != nil {
		return m.Finished
	}
	return false
}

func (m *GameState) GetTurn() bool {
	if m != nil {
		return m.Turn
	}
	return false
}

func (m *GameState) GetCells() []uint32 {
	if m != nil {
		return m.Cells
	}
	return nil
}

func init() {
	proto.RegisterType((*JoinRequest)(nil), "JoinRequest")
	proto.RegisterType((*JoinResponse)(nil), "JoinResponse")
	proto.RegisterType((*PlayerId)(nil), "PlayerId")
	proto.RegisterType((*Action)(nil), "Action")
	proto.RegisterType((*GameState)(nil), "GameState")
}

func init() { proto.RegisterFile("game.proto", fileDescriptor_38fc58335341d769) }

var fileDescriptor_38fc58335341d769 = []byte{
	// 294 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x51, 0x3d, 0x4f, 0xc3, 0x30,
	0x10, 0x55, 0xfa, 0x91, 0x8f, 0x6b, 0x8a, 0x90, 0x07, 0x14, 0x65, 0x40, 0x21, 0x52, 0xa5, 0x2c,
	0x78, 0x28, 0x1b, 0x1b, 0x30, 0x54, 0x45, 0x42, 0x54, 0x46, 0xfc, 0x00, 0x93, 0x1c, 0x10, 0x91,
	0xd8, 0x21, 0x76, 0x06, 0x24, 0x7e, 0x3c, 0xb2, 0x93, 0x36, 0xed, 0xc0, 0x76, 0xef, 0xf9, 0xee,
	0xdd, 0xbd, 0x67, 0x80, 0x0f, 0x5e, 0x23, 0x6d, 0x5a, 0xa9, 0x65, 0x7a, 0x05, 0x8b, 0x47, 0x59,
	0x0a, 0x86, 0xdf, 0x1d, 0x2a, 0x4d, 0x08, 0xcc, 0x04, 0xaf, 0x31, 0x72, 0x12, 0x27, 0x0b, 0x98,
	0xad, 0xd3, 0x67, 0x08, 0xfb, 0x16, 0xd5, 0x48, 0xa1, 0x90, 0x44, 0xe0, 0xa9, 0x2e, 0xcf, 0x51,
	0x29, 0xdb, 0xe6, 0xb3, 0x3d, 0x24, 0x2b, 0xf0, 0x9b, 0x8a, 0xff, 0x60, 0xbb, 0x2d, 0xa2, 0x49,
	0xe2, 0x64, 0x8b, 0x75, 0x40, 0x77, 0x03, 0xc1, 0x0e, 0x4f, 0xe9, 0x2d, 0xf8, 0x7b, 0x96, 0x5c,
	0x80, 0x6b, 0xae, 0xd9, 0x16, 0x56, 0x6b, 0xce, 0x06, 0x64, 0xf8, 0xbe, 0xdf, 0x0a, 0xcd, 0xd9,
	0x80, 0xd2, 0x07, 0x70, 0xef, 0x72, 0x5d, 0x4a, 0x71, 0xb2, 0xcc, 0xf9, 0x77, 0x99, 0x71, 0x94,
	0x63, 0x55, 0x0d, 0x32, 0xb6, 0x4e, 0x5f, 0x21, 0xd8, 0xf0, 0x1a, 0x5f, 0x34, 0xd7, 0x48, 0x62,
	0xf0, 0xdf, 0x4b, 0x51, 0xaa, 0x4f, 0x2c, 0x06, 0x3f, 0x07, 0x6c, 0x86, 0x75, 0xd7, 0x0a, 0x3b,
	0xec, 0x33, 0x5b, 0x93, 0x08, 0xe6, 0x46, 0x44, 0x45, 0xd3, 0x64, 0x9a, 0x2d, 0xef, 0x27, 0xe7,
	0x0e, 0xeb, 0x89, 0xf5, 0x2f, 0xcc, 0x8c, 0x2c, 0xb9, 0x86, 0x33, 0x1b, 0x18, 0x17, 0x85, 0xac,
	0x2d, 0x13, 0xd2, 0xa3, 0x90, 0xe3, 0x25, 0x3d, 0xc9, 0x73, 0x05, 0xe1, 0x06, 0xf5, 0x78, 0xd0,
	0x68, 0x23, 0x06, 0x3a, 0xd2, 0x97, 0xe0, 0xed, 0x3a, 0xfd, 0xc4, 0xdb, 0x2f, 0xe2, 0xd1, 0x3e,
	0x83, 0xe3, 0xf7, 0x37, 0xd7, 0x7e, 0xe8, 0xcd, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x90, 0x39,
	0x6f, 0x49, 0xde, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GameClient is the client API for Game service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GameClient interface {
	JoinRandomGame(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error)
	GetGameState(ctx context.Context, in *PlayerId, opts ...grpc.CallOption) (*GameState, error)
	PutMark(ctx context.Context, in *Action, opts ...grpc.CallOption) (*GameState, error)
}

type gameClient struct {
	cc *grpc.ClientConn
}

func NewGameClient(cc *grpc.ClientConn) GameClient {
	return &gameClient{cc}
}

func (c *gameClient) JoinRandomGame(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error) {
	out := new(JoinResponse)
	err := c.cc.Invoke(ctx, "/Game/JoinRandomGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) GetGameState(ctx context.Context, in *PlayerId, opts ...grpc.CallOption) (*GameState, error) {
	out := new(GameState)
	err := c.cc.Invoke(ctx, "/Game/GetGameState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) PutMark(ctx context.Context, in *Action, opts ...grpc.CallOption) (*GameState, error) {
	out := new(GameState)
	err := c.cc.Invoke(ctx, "/Game/PutMark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameServer is the server API for Game service.
type GameServer interface {
	JoinRandomGame(context.Context, *JoinRequest) (*JoinResponse, error)
	GetGameState(context.Context, *PlayerId) (*GameState, error)
	PutMark(context.Context, *Action) (*GameState, error)
}

// UnimplementedGameServer can be embedded to have forward compatible implementations.
type UnimplementedGameServer struct {
}

func (*UnimplementedGameServer) JoinRandomGame(ctx context.Context, req *JoinRequest) (*JoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinRandomGame not implemented")
}
func (*UnimplementedGameServer) GetGameState(ctx context.Context, req *PlayerId) (*GameState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameState not implemented")
}
func (*UnimplementedGameServer) PutMark(ctx context.Context, req *Action) (*GameState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutMark not implemented")
}

func RegisterGameServer(s *grpc.Server, srv GameServer) {
	s.RegisterService(&_Game_serviceDesc, srv)
}

func _Game_JoinRandomGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).JoinRandomGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/JoinRandomGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).JoinRandomGame(ctx, req.(*JoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_GetGameState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).GetGameState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/GetGameState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).GetGameState(ctx, req.(*PlayerId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_PutMark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Action)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).PutMark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/PutMark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).PutMark(ctx, req.(*Action))
	}
	return interceptor(ctx, in, info, handler)
}

var _Game_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Game",
	HandlerType: (*GameServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JoinRandomGame",
			Handler:    _Game_JoinRandomGame_Handler,
		},
		{
			MethodName: "GetGameState",
			Handler:    _Game_GetGameState_Handler,
		},
		{
			MethodName: "PutMark",
			Handler:    _Game_PutMark_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "game.proto",
}
